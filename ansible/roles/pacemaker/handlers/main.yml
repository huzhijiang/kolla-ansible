---
- name: Restart corosync container
  vars:
    service_name: "corosync"
    service: "{{ pacemaker_services[service_name] }}"
    config_json: "{{ pacemaker_config_jsons.results|selectattr('item.key', 'equalto', service_name)|first }}"
    corosync_container: "{{ check_pacemaker_containers.results|selectattr('item.key', 'equalto', service_name)|first }}"
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    privileged: "{{ service.privileged | default(True) }}"
  when:
    - action != "config"
    - service.enabled | bool
    - service.host_in_groups | bool
    - config_json | changed
      or corosync_container | changed
      or corosync_conf | changed
  notify:
    - Restart pacemaker container

- name: Restart pacemaker container
  vars:
    service_name: "pacemaker"
    service: "{{ pacemaker_services[service_name] }}"
    config_json: "{{ pacemaker_config_jsons.results|selectattr('item.key', 'equalto', service_name)|first }}"
    pacemaker_container: "{{ check_pacemaker_containers.results|selectattr('item.key', 'equalto', service_name)|first }}"
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    privileged: "{{ service.privileged | default(True) }}"
  when:
    - action != "config"
    - service.enabled | bool
    - service.host_in_groups | bool
    - config_json | changed
      or pacemaker_container | changed
      or corosync_conf | changed
  notify:
    - Ensuring STONITH is off
    - Ensuring VIP resource are properly setup
    - Ensuring haproxy resource monitor are properly setup
    - Ensuring resource constraint are properly setup
    - Waiting for virtual IP to appear

- name: Ensuring STONITH is off
  vars:
    service_name: "pacemaker"
    service: "{{ pacemaker_services[service_name] }}"
  command: "docker exec {{ service.container_name }} pcs property set stonith-enabled=false"
  run_once: True

- name: Ensuring VIP resource are properly setup
  vars:
    service_name: "pacemaker"
    service: "{{ pacemaker_services[service_name] }}"
  command: "docker exec {{ service.container_name }} pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip={{ kolla_internal_vip_address }} cidr_netmask=32 op monitor interval=30s"
  run_once: True

- name: Ensuring haproxy resource monitor are properly setup
  vars:
    service_name: "pacemaker"
    service: "{{ pacemaker_services[service_name] }}"
  command: "docker exec {{ service.container_name }} pcs resource create CheckAlive ocf:heartbeat:anything binfile=/dummy_service.sh monitor_hook=/check_alive.sh clone"
  run_once: True

- name: Ensuring resource constraint are properly setup
  vars:
    service_name: "pacemaker"
    service: "{{ pacemaker_services[service_name] }}"
  command: "docker exec {{ service.container_name }} pcs constraint location VirtualIP rule score=-INFINITY not_defined haproxy_health or haproxy_health eq string 0"
  run_once: True

- name: Waiting for virtual IP to appear
  wait_for:
    host: "{{ kolla_internal_vip_address }}"
    port: "{{ database_port }}"
